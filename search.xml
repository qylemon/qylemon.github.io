<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[memcached入门与应用]]></title>
    <url>%2F2019%2F12%2F12%2Fmemcached%E5%85%A5%E9%97%A8%E4%B8%8E%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[##是什么是一款高性能、分布式的内存对象缓存系统可以有效地分担数据库负载，基于libevent事件处理实现无阻塞通信（高性能原因之一），是以key/value键值对形式存储 ##有什么优势熟悉memcached的童鞋可能知道 一般它都会被和reids进行比较，两者各有千秋，redis支持5种数据类型存储，memcached仅支持key/value；但memcached的性能优于redis。 ##能干啥使用memcached做缓存可以有效地减轻数据库压力，提高系统性能 ##关于存储 底层存储内存分配机制memcached数据最终会存入chunk，分配时通过slab分配器决定的，slabclass会记录slab的信息，每个slab下有无数个等份page，page下有无数个等份chunk，chunk是数据的真实存储单位，默认大小为80byte，slab的大小取决于自增长因子 寻找chunk的过程memcached的删除属于逻辑删除，删除和过期的chunk会标识后放入slot，以供后续存储的空间处理，当在slot中没有找到不用的chunk时，会寻找空闲chunk存储，当两者都不满足时会触发LRU机制，在寻找chunk存储时，不会因为其他slab有空闲就不触发LRU流程 memcached分布式的hash算法①余数hash由名可得，这种算法时取余数获得存储的位置，主要是将key值转换为hash值然后除以机器数量取余。此方法有很大缺陷，一旦机器数量变化(增加节点/机器损坏)数据将会失效； ②※一致性hash将服务器列表(真实节点)和虚拟节点分布在一个0-2的32次方的圆上。同样key取hash值，通过余数方式确定存放机器，如果命中的时虚拟节点则顺时针找到下一个真实节点存储。此方法影响更小、易排查 ##哪儿尬这次没出现啥尬的，安装过程就不记录了。碰到新的方法或问题，下次再记录 ##endmemcached基于libevent，那么安装也依赖于libevent，所以安装时需要先安装libeventmemcached可以通过设置CAS或者版本号的方式来避免重复修改]]></content>
      <categories>
        <category>memcached</category>
      </categories>
      <tags>
        <tag>memcached</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux部署项目及基础环境配置]]></title>
    <url>%2F2019%2F10%2F29%2Flinux%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E4%BA%8C%E4%B8%89%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[记录一下关于linux服务器的项目环境安装和部署 ##所选环境##CentOS6.8+JDK8+MySQL+Tomcat ##安装server端MySQL##使用yum命令安装MySQL yum install -y mysql mysql-server 等待安装完成MySQL部分就基本安装完成了，但是此时的MySQL默认是只有本机(locathost)能够连接的，在终端登陆MySQL修改远程连接的SQL； mysql&gt;select host,user from mysql.user;mysql&gt;update user set host=&#39;%&#39; where user=&#39;root&#39; and host=&#39;127.0.0.1&#39;;然后刷新MySQL,然后就可以远程连接了mysql&gt;flush privileges; ##安装JDK##解压JDK的压缩包tar -zxf jdk-xx-xxx...vi /etc/profile 配置jdk环境变量 export JAVA_HOME=pwd得到的jdk路径exprot PATH=$PATH:$JAVA_HOME/bin配置好后刷新profile文件配置 -&gt;source /etc/profile配置时注意等号两边不要有空格不然会出现乱七八糟的报错 刷新后输入java-version出现了熟悉的版本号命令行 ##部署Tomcat##同jdk第一步，解压后apache目录中有很多文件 要运行的war包要放入webapps中，默认运行的项目名为ROOT；bin目录中负责apache的启动和停止 启动→./startup.sh 停止→./shutdown.sh 启动后通过tail命令查看日志，如无报错 即可正常访问 tail -f logs/catalina.out 查看tomcat的日志 ##注意事项##1.mysql和tomcat的端口都需要在iptables文件中增加，否则远程连接和访问8080时会出现无法连接 vi /etc/sysconfig/iptables-A INPUT -m state –state NEW -m tcp -p tcp –dport 3306 -j ACCEPT-A INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT刷新配置文件 -&gt; service iptables restart这里需要注意 新增的端口信息一定要在icmp-host-prohibited之前 2.可能存在端口占用 netstat -nltp | grep 端口号 然后kill掉进程号即可 3.上图问题是没有开启mysql服务，可以是设置自启也可以运行以下命令 service mysqld start 关于压缩包关于上传相应压缩包，可以使用ftp也可以通过yum源安装工具 yum install -y lrzsz rz上传 sz下载 ##end##基础就是这些，其他负载啥的以后填坑]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>环境部署</tag>
        <tag>Linux操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序初体验]]></title>
    <url>%2F2019%2F08%2F22%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[微信小程序已经出现很久，长听说却没有上手学习，听说要求严格且繁杂众说纷纭，最近正好有学习，记录一番 介绍微信小程序的介绍→微信小程序 开发异同1.开发工具 在开放工具上小程序使用了特有的微信开发者工具2.布局差异 小程序拥有自己特殊的文本标记语言小程序的写法与Vue相似，基本与web的变化不大，微信小程序为了方便开发者还设计了云开发用来设计服务端（下次使用到再记录） 相关文档及发布 开发之前需要了解其组成，文档当然是→官方文档 小程序的发布很严格，部分类目对个人是不开放的，需要相关的资质 end小技巧:在app.json中输入将要编写的文件名称，会快速生成wxml、wxss，js、json文件]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记od的一次使用]]></title>
    <url>%2F2019%2F06%2F02%2F%E8%AE%B0od%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[首次使用od记录一下，临时需要用到，只能临阵磨枪 ##简单认识使用之前首先要认识它的界面具体作用以及一些基础指令在反汇编窗口能够看到想要的东西，然后进行操作比如跳过注册步骤，找到后在数据窗口可以修改相应的数据内容使用的是二进制，因为首次使用所以其他窗口没怎么用到不太了解，再说说基本的OD汇编指令 OD汇编指令 相关说明 NOP 无操作 PUSH 将数据压如堆栈中 POP 出栈（与PUSH相反） JE或者JZ 若相等则跳；如果零标志位Z不为0则跳转,即,要求操作的结果为零 JNE或JNZ 若不等则跳转；如果零标志位Z为0则跳转,即,要求操作的结果非零 CALL 是指将转移到指定的子程序处,它的操作数就是给定的地址 相关汇编指令还有很多，百度一下你就知道 ##实践碰到问题以及技巧1.修改未生效–这个主要是因为保存的问题，OD的保存是”右键”–”复制到可执行文件”然后在保存文件2.找到数据后快速同步定位数据到数据窗口，在反编译窗口右键单击要修改的数据 ##demo实例具体的实例就不记录了，记录一个demo的地址→用OD破解注册过程 ##end 以上描述的都是关于未加壳的OD汇编描述，加壳需要先脱壳 如果修改文字内容字符不够，需要在编辑时将多于空位补零填满 补充换行符:0D0A]]></content>
      <categories>
        <category>OD汇编</category>
      </categories>
      <tags>
        <tag>休闲娱乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter进阶]]></title>
    <url>%2F2019%2F05%2F31%2Fflutter%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[终于学完了Flutter的基础组件，并且实例了一把，感觉光玩组件就很有趣，期待接下来去学习与后台对接成为灵活的App,那么在实践过程中..又踩坑了，记录一下 ##关于报错在学习的过程中出现了这样一个报错 RangeError (index): Invalid value: Valid value range is empty: 0 怎么可能是我出错呢(小声哔哔)，查阅百度这个错误触发的原因是因为构建失败，之后在终端运行 flutter clean 在重新跑项目 成功解决 ##关于打包写完以后想要看看真机是啥效果，于是乎就需要打包，但是在打包之前需要修改几处代码才能够打包成功1.需要有key.jks密钥 AndroidStudio的bin目录位置\keytool -genkey -v -keystore 存放密钥的位置\key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key 之后需要填key、pwd等一系列内容然后就能够生成 2.需要在项目中将密钥添入供项目读取先创建/android/key.properties 存放key的相关信息 storePassword=&lt;创建keystore时的storePassword&gt;keyPassword=&lt;创建keystore时的keyPassword&gt;keyAlias=keystoreFile=&lt;密钥库文件的位置 , 例如: /Users//key.jks&gt; 然后/android/app/build.gradle 找到 android { 在这行之前添加如下代码 def keystorePropertiesFile = rootProject.file(“key.properties”)def keystoreProperties = new Properties()keystoreProperties.load(new FileInputStream(keystorePropertiesFile)) 然后把buildType{}替换一段代码 signingConfigs { release { keyAlias keystoreProperties[‘keyAlias’] keyPassword keystoreProperties[‘keyPassword’] storeFile file(keystoreProperties[‘storeFile’]) storePassword keystoreProperties[‘storePassword’] } } buildTypes { release { signingConfig signingConfigs.release } } 这样就配置完成了，然后运行 flutter build run 就可以正常打包了 ##endstoreFile的路径要填写绝对路径，生成的密钥不要共享和泄露打包完的apk文件在 /build/app/outputs/apk/app-release.apk]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>small case</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次flutter无限踩坑爬坑的历程]]></title>
    <url>%2F2019%2F05%2F09%2Fflutter%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[简介Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。Flutter百度百科 安装 工欲善其事，必先利其器 &nbsp;安装必不可少，坑也不能少 想要正常使用flutter,需要经历以下几个步骤 Flutter SDK &nbsp;下载地址 flutter配置path需要指向到flutter文件夹的bin目录 2.Android SDK+开发工具 Android Studio下载地址使用vs code、idea开发可以直接安装sdk(已安装过的 需要配置环境变量供flutter检测)3.配置环境变量+ide绑定环境路径(下图为sdk位置配置)(ide就不记录了,都是setting&gt;&gt;&gt;plugins先down下来 然后配置)正常到这里就结束了,然后重启,在命令行中输入 flutter doctor -v 进行检测 (感叹号是没用连接可用模拟器) &nbsp;出现上图即代表安装成功后面几个ide检测可以根据自己的需求来,不正常就可能会出现如下情况(主要说说Android toolchain项出现的问题) ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ (没有检测到sdk的环境变量 ) 看上图正常情况下ANDROID_HOME的环境配置 2.✗ Android license status unknown. （更新sdk） 执行flutter doctor –android-licenses 返回如下内容： A newer version of the Android SDK is required. To update, run: 此处是你AndroidSdk安装目录/tools/bin/sdkmanager –update 执行run后的内容即可 3.Exception in thread “main” java.lang.UnsupportedClassVersionError 这里时jdk的问题 输入java -version查看版本 仅支持1.8+版本 4.证书问题 sdk license available flutter doctor –android-licenses 然后一直选择y即可 虚拟化冲突在使用开始前还需要做一个准备,需要安装AVD虚拟机,也就是模拟机,这时候出现了新的问题这个问题是因为之前安装docker需要开启hyper-v，而AVD需要HAXM的支持，两种同为虚拟化扩展，所以会造成冲突。百度了一下 Window10同时使用Docker Hyper-v和Android模拟器,重启后打开ide，avd完美运行。 Hello Flutter全部配置都完工了，Hello一波 end一次繁琐而又刺激的安装，虽然过程艰难，但是也算收获满满，后续碰到问题和解决办法会补充在end里新收获:写Flutter的时候一定记着,万物皆组件((^_^))补充:关于as在3.x安装没有SDK选项的记录→安装Android Studio时没有Sdk选项]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>安装与配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[go初体验]]></title>
    <url>%2F2019%2F04%2F15%2Fgo%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[概述最近突然有被go刷屏的感觉,带着好奇心了解了go,得知go被众多开发者和大牛选择的原因如下: 可学习度高(容易上手)&nbsp;&nbsp;&nbsp;&nbsp; 开发效率高 方便部署、稳定性&nbsp;&nbsp;&nbsp;&nbsp; 并发能力原因还有很多,心动ing,决定仔细了解一番,没有从教程中感觉到go具体用途0.0(看来学习前还要了解它的作用) go能做什么Go语言主要用于开发服务端,其定位也是开发”大型软件”的,适合多人协作、便于开发和后期维护。主要适用于web、api等开发 安装go环境go环境下载地址下载对于版本安装,安装完成后在终端输入 go env 出现很多信息即为安装成功了 hello go环境安好后在任意目录创建hello.go文件 文件内容如下 package main import &quot;fmt&quot; func main() { fmt.Println(&quot;Hello, go!&quot;) } 在该目录下运行 go run hello.go 得到如下结果 Hello, go! ##end如环境安装失败注意path是否配置]]></content>
  </entry>
  <entry>
    <title><![CDATA[Dubbo入门体验]]></title>
    <url>%2F2019%2F04%2F01%2FDubbo%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[简介Dubbo 是阿里巴巴开源项目的一个分布式服务框架。其致力于提供高性能和透明化的 RPC 远程调用方案，以及 SOA 服务治理方案。 原理由图可见dubbo主要由服务提供者、注册中心、服务消费者、监控中心和容器组成 节点 角色说明 Container 服务运行容器 Provider 暴露服务的服务提供者 Consumer 调用远程服务的服务消费者 Registry 服务注册与发现的注册中心 Monitor 统计服务的调用此处和调用时间的监控中心 过程如上图所示 服务运行容器启动、加载运行服务提供者 服务提供者启动时将服务提供给注册中心 服务消费者启动时向注册中心订阅需要的服务 注册中心返回服务提供者信息列表给消费者 服务消费者从列表中,基于软负载均衡选一台服务提供者进行调用，如果调用失败再选另一台 服务消费者和服务提供者在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心具体实现在网上找了很久demo多数写的不够全面,找了很久才找到了一个较为详细的,项目是maven聚合项目,通过api、服务提供者、服务消费者三个model构成,注册中心使用zookeeper单体zookeeper-Windows安装教程,demo具体实现→dubbo-demo补充在dubbo官网上还有服务、集群、负载均衡等知识供学习Dubbo官网,这些可以在dubbo-admin中控制dubbo-admin]]></content>
  </entry>
  <entry>
    <title><![CDATA[docker入门]]></title>
    <url>%2F2019%2F03%2F28%2Fdocker%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[简介docker容器采用c/s架构,使用镜像来创建容器,使用远程api来管理容器&gt;&gt;&gt;docker简介 应用场景某个系统的技术栈非常广就会需要依赖于各种开源库和中间件,如果需要多次部署,那么版本控制、依赖管理就会相对复杂,docker只需要根据应用程序的部署步骤编写一份Dockerfile文件(将安装、配置等操作交由Docker自动化处理),然后构建并发布他的镜像,这样,不管在什么机器上都只需要拉取需要的镜像,然后就可以直接部署运行 生命周期docker分为三部分,理解其作用也就了解了生命周期,docker分为镜像、容器、仓库 镜像是Docker生命周期中的构建或打包阶段，容器则是启动或执行阶段 安装mac和Linux可以流畅安装,windows需要看版本,专业版流畅,家庭版需要执行命令开启Hyper-V和修改注册表,参考→windows家庭版安装docker 基础命令docker 查看所有命令 docker images 列出本地镜像 docker pull 从镜像仓库中拉取或者更新指定镜像 docker ps 列出正在运行的容器... 实现docker run hello-world 能够看到控制台打印hello world就成功了 end docker在后期使用过程中拉去镜像极慢,可以在docker-&gt;setting中采用国内镜像加速 https://registry.docker-cn.com 中文镜像加速网址 dockerfile适合安装多个镜像自动化时使用,单个推荐直接安装 补充dockerfile创建dockerfil文件 type nul&gt;DockerfileName dockerfile内容如下 #基于 node 镜像 FROM node #指定维护者信息 MAINTAINER xx xxx@xx.com #指定下一条命令的运行目录 WORKDIR /usr/local #新建路径 RUN mkdir work #在 /usr/local 的基础上指定运行目录，所以当前目录为：/usr/local/work WORKDIR work #安装必要的组件 RUN npm install express RUN npm install express-generator -g RUN npm install supervisor -g RUN express myapp -e #将当前目录下的文件，复制到 /usr/local/work/ 下 #COPY . /usr/local/work/ WORKDIR /usr/local/work/myapp RUN npm install WORKDIR /usr/local/work/myapp #启动 express 应用 CMD supervisor ./bin/www #暴露容器 3000 端口 EXPOSE 3000 docker build -t imagename . （在dockerfile所在目录运行创建镜像 .号是指定 dockerfile 在当前目录中）docker run -p 4000:3000 imagename (映射到宿主机) *dockerfile取于使用 Dockerfile 自定义 Docker 镜像]]></content>
  </entry>
  <entry>
    <title><![CDATA[mongoDB初体验]]></title>
    <url>%2F2019%2F03%2F24%2FMongoDB%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[mongodb是非关系型数据库的一种… 还是看百度吧 →百度百科,在首次使用中安装和运行上出现了些小问题,记录一下以便下一次查阅 mongo与关系型数据库的区别相较于关系型各有优缺点 安装MongoDB安装过程非常easy 不要对坑跳就ok,安装时记得取消掉下图的√ 启动MongoDB服务首先要去了解MongoDB的基础语法…百度吧…这里我参考了网上的教程步骤如下： 创建一个文件夹存放MongoDB的脚本（mkdir db） 在MongoDB的bin目录里启动cmd,然后执行命令F:\MongoDB\Server\4.0\bin&gt;mongod --dbpath=F:\db然后就能启动服务了(^_^),MongoDB启动后将占用端口27017,如下图可视化工具由于命令比较麻烦,这里我选用了GUI工具,选择了RoboMongo官网链接,操作非常easy,简单操作可以参考这篇教程RoboMongo简单操作介绍 endMongoDB的连接有可能会出现断连的情况,不过应该极少,这点需要注意一下︿(￣︶￣)︿]]></content>
  </entry>
  <entry>
    <title><![CDATA[解决MySql存入特殊符号乱码问题]]></title>
    <url>%2F2019%2F03%2F23%2FMySql%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[之前偶然发现后台处理带有特殊符号的字符串无法存入数据库,并且程序报错Incorrect string value: &#39;\xF0\x9F\xA4\x97 3...&#39; for column &#39;nick_name&#39; at row 1 乱码原因分析emoji表情符采用Unicode 6标准 一个emoji存储需要占用4个byte字节存储,而mysql采用utf-8编码时采用3个byte字节存储一个字符,所以导致无法存入 了解了原因之后就可以着手解决了,这个问题可以着手从两方面解决 修改数据库编码 修改代码 修改数据库编码修改数据库编码比较简单,可以将utf-8修改为utf8mb4 然后重启数据库再次存储就不会报错了 但是数据库内emoji显示为乱码无法查看 修改代码 过滤特殊字符后存入,弊端:内容不齐全如果全是emoji将会显示为空nickname.replaceAll(&quot;[\ue000-\uefff]&quot;,&quot;&quot;); 对含有特殊字符的字符串进行加解密处理,弊端:数据库内看到的内容为编码字符,显示时需要解码 `String nickname = “LemonQi”; if(nickname != null){String a =Base64.encodeBase64String(nickname.getBytes(&quot;UTF-8&quot;));//进行编码 String a = new String(Base64.decodeBase64(nickname), &quot;UTF-8&quot;);//进行解码 }`end每修改的方式都有一定的弊端,需要就业务逻辑来进行使用,就编码解码而言相对谨慎能够保持其完整性,以上就是个人使用感觉的记录了(^_^)]]></content>
  </entry>
  <entry>
    <title><![CDATA[初探Vue+axios]]></title>
    <url>%2F2019%2F03%2F22%2FVueAndAxios%2F</url>
    <content type="text"><![CDATA[因为不太懂前端所以一开始只了解div+css,后来慢慢听别人提起Vue、Angular、React,才开始了解前端框架，首次体验Vue发现相较于div+css有了明显的便利感操作十分简单,为Vue打call总结一下体验感(^_^) Vue优点 将原来的直接操作dom的思想转变为操作数据,十分方便 操作简单,通过组合、拼凑快速完成页面渲染 axiosaxios的好处就不列举了 太多了(๑•̀ㅂ•́)و✧ 相比ajax,axios则更适合前端mvvm思想,它还能自动转换json数据 这更加适应了前后端分离的开发方式 补充之前有写过一个没有登录态的前后端整合，后来很久没有写前端，最近整合了一个，填一下之前的坑。 关于登录态前后端分离项目 后端在前端发来登录信息时，后端反馈前端一个token 然后前端存储，并在发送需要验证用户的请求时携带 如何存储使用sessionStorage或者localStorage存储，两者的同点时都使用浏览器存储信息，异点在于session显而易见属于会话存储，当会话结束时存储的内容就失效了 具体使用要看业务内容而定 关于局域网测试 修改package.json中script下dev的值，在后面加入–host 0.0.0.0 记录一个失了智的遭遇，局域网内自己电脑能访问手机上发送不出去axios请求，因为设置如下（つ﹏⊂） axios.default.baseUrl =’http://localhost:8080&#39; 以上方式是错误的 要配置成局域网IP end新的坑 下次碰到再记录附一个vscode生成Vue代码模板的快捷方式→传送门]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot使用JavaMail发送SMTP遇到的坑]]></title>
    <url>%2F2019%2F03%2F21%2FJavaMail%2F</url>
    <content type="text"><![CDATA[添加maven依赖&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt; &lt;/dependency&gt; 添加properties配置#email 配置 spring.mail.host=smtp.xxx.com spring.mail.username=xxxxxxx@163.com //此处password是校验码不是邮箱密码可自行百度 spring.mail.password=xxxxxxxx spring.mail.properties.mail.smtp.starttls.enable=true spring.mail.properties.mail.smtp.port=25 //端口号 spring.mail.default-encoding=UTF-8 添加测试方法@Autowired JavaMailSender mailSender; //自动注入邮件配置 @Value(&quot;${spring.mail.username}&quot;) private String Sender; //读取配置文件中的参数 public String sendSimpleMail(){ SimpleMailMessage message = new SimpleMailMessage(); message.setFrom(Sender); //邮件发送人 //需要多人接收使用list 集合 不需要可以直接使用message的几个方法 List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;xxxx@xxx.com&quot;); list.add(&quot;xxx@xxx.com&quot;); for (int i = 0; i &lt; list.size(); i++) { String obj=(String)list.get(i); message.setTo(obj); message.setSubject(&quot;订单&quot;); //邮件主题 message.setText(pd.getString(&quot;message&quot;)+pd.get(&quot;uid&quot;)); //邮件内容 mailSender.send(message); } return &quot;OK&quot;; } 注意事项邮箱开放25/465端口(基本,有些开放其他端口)发送邮件 message.setTo //接收人 message.setCc //抄送人 ... 阿里ecs默认封25端口 可以使用ssl 传输 ssl加密发送邮件修改properties配置 //spring.mail.properties.mail.smtp.port=25 spring.mail.properties.mail.smtp.port=465 添加properties配置: #SSL证书Socket工厂 spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory 使用465 服务器成功发送(^_^)]]></content>
  </entry>
  <entry>
    <title><![CDATA[PowerDesigner踩坑过程]]></title>
    <url>%2F2019%2F03%2F21%2FPowerDesigner%2F</url>
    <content type="text"><![CDATA[1.安装及入门pd16.5下载、破解、汉化教程PowerDesigner最基础的使用方法入门学习 2.小技巧 去黑线(强迫症患者) 模型默认在黑色线框中显示，影响视觉体验 Tools→DispalyPreferences 将show page delimiter 取消勾选 sql反向生成模型 File→Reverse Engineer→Database 选择类型选择文件 生成 导出excel表格文件 选中tables ctrl + shift +x 然后运行脚本（脚本如下） 导出excel&apos;****************************************************************************** &apos;* File: pdm2excel.txt &apos;* Title: pdm export to excel &apos;* Purpose: To export the tables and columns to Excel &apos;* Model: Physical Data Model 16.5 , Microsoft Office 2007 &apos;* Objects: Table, Column, View &apos;****************************************************************************** Option Explicit Dim rowsNum rowsNum = 0 &apos;----------------------------------------------------------------------------- &apos; Main function &apos;----------------------------------------------------------------------------- &apos; Get the current active model Dim Model Set Model = ActiveModel If (Model Is Nothing) Or (Not Model.IsKindOf(PdPDM.cls_Model)) Then MsgBox &quot;The current model is not an PDM model.&quot; Else &apos; Get the tables collection &apos;创建EXCEL APP dim beginrow DIM EXCEL, SHEET set EXCEL = CREATEOBJECT(&quot;Excel.Application&quot;) EXCEL.workbooks.add(-4167)&apos;添加工作表 EXCEL.workbooks(1).sheets(1).name =&quot;test&quot; set sheet = EXCEL.workbooks(1).sheets(&quot;test&quot;) ShowProperties Model, SHEET EXCEL.visible = true &apos;设置列宽和自动换行 sheet.Columns(1).ColumnWidth = 20 sheet.Columns(2).ColumnWidth = 40 sheet.Columns(4).ColumnWidth = 20 sheet.Columns(5).ColumnWidth = 20 sheet.Columns(6).ColumnWidth = 15 sheet.Columns(1).WrapText =true sheet.Columns(2).WrapText =true sheet.Columns(4).WrapText =true End If &apos;----------------------------------------------------------------------------- &apos; Show properties of tables &apos;----------------------------------------------------------------------------- Sub ShowProperties(mdl, sheet) &apos; Show tables of the current model/package rowsNum=0 beginrow = rowsNum+1 &apos; For each table output &quot;begin&quot; Dim tab For Each tab In mdl.tables ShowTable tab,sheet Next if mdl.tables.count &gt; 0 then sheet.Range(&quot;A&quot; &amp; beginrow + 1 &amp; &quot;:A&quot; &amp; rowsNum).Rows.Group end if output &quot;end&quot; End Sub &apos;----------------------------------------------------------------------------- &apos; Show table properties &apos;----------------------------------------------------------------------------- Sub ShowTable(tab, sheet) If IsObject(tab) Then Dim rangFlag rowsNum = rowsNum + 1 &apos; Show properties Output &quot;================================&quot; sheet.cells(rowsNum, 1) = &quot;实体名&quot; sheet.cells(rowsNum, 2) =tab.name sheet.cells(rowsNum, 3) = &quot;&quot; sheet.cells(rowsNum, 4) = &quot;表名&quot; sheet.cells(rowsNum, 5) = tab.code sheet.Range(sheet.cells(rowsNum, 5),sheet.cells(rowsNum, 6)).Merge rowsNum = rowsNum + 1 sheet.cells(rowsNum, 1) = &quot;属性名&quot; sheet.cells(rowsNum, 2) = &quot;说明&quot; sheet.cells(rowsNum, 3) = &quot;&quot; sheet.cells(rowsNum, 4) = &quot;字段中文名&quot; sheet.cells(rowsNum, 5) = &quot;字段名&quot; sheet.cells(rowsNum, 6) = &quot;字段类型&quot; &apos;设置边框 sheet.Range(sheet.cells(rowsNum-1, 1),sheet.cells(rowsNum, 2)).Borders.LineStyle = &quot;1&quot; sheet.Range(sheet.cells(rowsNum-1, 4),sheet.cells(rowsNum, 6)).Borders.LineStyle = &quot;1&quot; Dim col &apos; running column Dim colsNum colsNum = 0 for each col in tab.columns rowsNum = rowsNum + 1 colsNum = colsNum + 1 sheet.cells(rowsNum, 1) = col.name sheet.cells(rowsNum, 2) = col.comment sheet.cells(rowsNum, 3) = &quot;&quot; sheet.cells(rowsNum, 4) = col.name sheet.cells(rowsNum, 5) = col.code sheet.cells(rowsNum, 6) = col.datatype next sheet.Range(sheet.cells(rowsNum-colsNum+1,1),sheet.cells(rowsNum,2)).Borders.LineStyle = &quot;2&quot; sheet.Range(sheet.cells(rowsNum-colsNum+1,4),sheet.cells(rowsNum,6)).Borders.LineStyle = &quot;2&quot; rowsNum = rowsNum + 1 Output &quot;FullDescription: &quot; + tab.Name End If End Sub]]></content>
  </entry>
  <entry>
    <title><![CDATA[The first day of blogging]]></title>
    <url>%2F2019%2F03%2F21%2Ffirst%2F</url>
    <content type="text"><![CDATA[这是这个blog存在的第一天记录一下接下来将会记录自己挖坑自己填的流水账、学习等过程(^_^) Hello world！！！]]></content>
      <categories>
        <category>first</category>
      </categories>
  </entry>
</search>
