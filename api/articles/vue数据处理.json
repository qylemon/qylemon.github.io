{"title":"vue数据处理","slug":"vue数据处理","date":"2020-01-09T12:21:51.637Z","updated":"2020-02-09T15:30:22.382Z","comments":true,"path":"api/articles/vue数据处理.json","excerpt":"简述一般我们会将数据通过json等方式传递到前端，但是性别等需要汉字的字段则不会直接存入数据库(浪费内存)，于是传递到前端就是0，1，2…,关于数据转换记录几种处理方式","covers":null,"content":"<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>一般我们会将数据通过json等方式传递到前端，但是性别等需要汉字的字段则不会直接存入数据库(浪费内存)，于是传递到前端就是0，1，2…,关于数据转换记录几种处理方式<a id=\"more\"></a></p>\n<h2 id=\"逐条处理\"><a href=\"#逐条处理\" class=\"headerlink\" title=\"逐条处理\"></a>逐条处理</h2><p>当数据放入需要展示的位置时我们通过<code>v:if</code>处理可能碰到的情况，举例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-table-column prop=&quot;ud_status&quot; label=&quot;性别&quot; :formatter=&quot;formatRole&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// js</span><br><span class=\"line\">formatRole: function(row, column) &#123;</span><br><span class=\"line\">    return row.ud_status == &apos;0&apos; ? &quot;男&quot; : row.ud_status == &apos;1&apos; ? &quot;女&quot; : &quot;?&quot;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模板统一的情况\"><a href=\"#模板统一的情况\" class=\"headerlink\" title=\"模板统一的情况\"></a>模板统一的情况</h2><p>当表格多个列通过循环进行展示时，我们将无法对模板单一字段进行处理，可以通过数据遍历的方式进行处理，举例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js</span><br><span class=\"line\">this.usersData.map(function (val) &#123;</span><br><span class=\"line\">  if (val.gender == 0) &#123;</span><br><span class=\"line\">    val.gender = &apos;男&apos;</span><br><span class=\"line\">  &#125; else if (val.gender == 1) &#123;</span><br><span class=\"line\">    val.gender = &apos;女&apos;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    val.gender = &apos;?&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>为了方便可以将统一的这种情况进行封装使用，既可以愉快的处理逻辑，又可以”偷懒”了~(￣▽￣)~*</p>\n","more":"</p>\n<h2 id=\"逐条处理\"><a href=\"#逐条处理\" class=\"headerlink\" title=\"逐条处理\"></a>逐条处理</h2><p>当数据放入需要展示的位置时我们通过<code>v:if</code>处理可能碰到的情况，举例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-table-column prop=&quot;ud_status&quot; label=&quot;性别&quot; :formatter=&quot;formatRole&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// js</span><br><span class=\"line\">formatRole: function(row, column) &#123;</span><br><span class=\"line\">    return row.ud_status == &apos;0&apos; ? &quot;男&quot; : row.ud_status == &apos;1&apos; ? &quot;女&quot; : &quot;?&quot;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模板统一的情况\"><a href=\"#模板统一的情况\" class=\"headerlink\" title=\"模板统一的情况\"></a>模板统一的情况</h2><p>当表格多个列通过循环进行展示时，我们将无法对模板单一字段进行处理，可以通过数据遍历的方式进行处理，举例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js</span><br><span class=\"line\">this.usersData.map(function (val) &#123;</span><br><span class=\"line\">  if (val.gender == 0) &#123;</span><br><span class=\"line\">    val.gender = &apos;男&apos;</span><br><span class=\"line\">  &#125; else if (val.gender == 1) &#123;</span><br><span class=\"line\">    val.gender = &apos;女&apos;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    val.gender = &apos;?&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>为了方便可以将统一的这种情况进行封装使用，既可以愉快的处理逻辑，又可以”偷懒”了~(￣▽￣)~*</p>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"vue","path":"api/tags/vue.json"}]}