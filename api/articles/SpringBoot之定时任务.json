{"title":"SpringBoot之定时任务","slug":"SpringBoot之定时任务","date":"2020-04-17T03:55:20.456Z","updated":"2020-05-02T13:38:14.716Z","comments":true,"path":"api/articles/SpringBoot之定时任务.json","excerpt":" [Figure] 通常我们业务上定时发送邮件，订单超时等操作需要使用到任务调度，","covers":["https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/4412f2c670c3f7aaaaba4211c082870bc89304b36b2cbaa8947bc648752b2f009abe5b84deb64a772689ed93e67fafa2?pictype=scale&amp;from=30113&amp;version=3.3.3.3&amp;uin=1643994375&amp;fname=1502865180289216.png&amp;size=750"],"content":"<p><img src=\"https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/4412f2c670c3f7aaaaba4211c082870bc89304b36b2cbaa8947bc648752b2f009abe5b84deb64a772689ed93e67fafa2?pictype=scale&amp;from=30113&amp;version=3.3.3.3&amp;uin=1643994375&amp;fname=1502865180289216.png&amp;size=750\" alt><br>通常我们业务上定时发送邮件，订单超时等操作需要使用到任务调度，<a id=\"more\"></a>市面上也有许多实现方式，比如：redis的TTL，rabbitMQ的死信+TTL，Quartz等，处于业务大小，自带整合等最终选择了Quartz 下面记录自己的整合和使用</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Quartz 是一个完全由 Java 编写的开源作业调度框架，为在 Java 应用程序中进行作业调度提供了简单却强大的机制。可以与 J2EE 与 J2SE 应用程序相结合也可以单独使用。允许程序开发人员根据时间的间隔来调度作业。实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"导入pom包\"><a href=\"#导入pom包\" class=\"headerlink\" title=\"导入pom包\"></a>导入pom包</h3><p>SpringBoot2.x整合了quartz 导入包即可使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写任务内容\"><a href=\"#编写任务内容\" class=\"headerlink\" title=\"编写任务内容\"></a>编写任务内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QuartzJob extends QuartzJobBean &#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</span><br><span class=\"line\">\t\t// 任务内容        </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任务执行类\"><a href=\"#任务执行类\" class=\"headerlink\" title=\"任务执行类\"></a>任务执行类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class MyScheduler &#123;</span><br><span class=\"line\">\t@Bean(name = &quot;jobDetail&quot;)</span><br><span class=\"line\">    public JobDetail jobDetail()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        JobDetail jobDetail = JobBuilder.newJob(HelloWorld.class)\t\t// 定义Job类为HelloWorld类 也就是任务所在类</span><br><span class=\"line\">\t\t\t\t.withIdentity(&quot;eclipse1&quot;)\t\t\t\t\t\t\t\t// 定义name/group (&quot;&quot;,&quot;&quot;)</span><br><span class=\"line\">                .usingJobData(&quot;key&quot;,&quot;value&quot;).storeDurably()\t\t\t\t// 定义属性</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">        return jobDetail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean(name = &quot;trigger&quot;)</span><br><span class=\"line\">    public CronTriggerFactoryBean  simpleJobTrigger1()&#123;</span><br><span class=\"line\">        CronTriggerFactoryBean trigger = new CronTriggerFactoryBean();</span><br><span class=\"line\">        trigger.setJobDetail(jobDetail());</span><br><span class=\"line\">        // cron表达式，每天0点执行一次</span><br><span class=\"line\">        trigger.setCronExpression(&quot;0 0 0 * * ?&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return trigger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时运行项目就能够正常使用定时任务了，测试可以修改corn表达式的时间</p>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2>","more":"市面上也有许多实现方式，比如：redis的TTL，rabbitMQ的死信+TTL，Quartz等，处于业务大小，自带整合等最终选择了Quartz 下面记录自己的整合和使用</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Quartz 是一个完全由 Java 编写的开源作业调度框架，为在 Java 应用程序中进行作业调度提供了简单却强大的机制。可以与 J2EE 与 J2SE 应用程序相结合也可以单独使用。允许程序开发人员根据时间的间隔来调度作业。实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"导入pom包\"><a href=\"#导入pom包\" class=\"headerlink\" title=\"导入pom包\"></a>导入pom包</h3><p>SpringBoot2.x整合了quartz 导入包即可使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写任务内容\"><a href=\"#编写任务内容\" class=\"headerlink\" title=\"编写任务内容\"></a>编写任务内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QuartzJob extends QuartzJobBean &#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</span><br><span class=\"line\">\t\t// 任务内容        </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任务执行类\"><a href=\"#任务执行类\" class=\"headerlink\" title=\"任务执行类\"></a>任务执行类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class MyScheduler &#123;</span><br><span class=\"line\">\t@Bean(name = &quot;jobDetail&quot;)</span><br><span class=\"line\">    public JobDetail jobDetail()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        JobDetail jobDetail = JobBuilder.newJob(HelloWorld.class)\t\t// 定义Job类为HelloWorld类 也就是任务所在类</span><br><span class=\"line\">\t\t\t\t.withIdentity(&quot;eclipse1&quot;)\t\t\t\t\t\t\t\t// 定义name/group (&quot;&quot;,&quot;&quot;)</span><br><span class=\"line\">                .usingJobData(&quot;key&quot;,&quot;value&quot;).storeDurably()\t\t\t\t// 定义属性</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">        return jobDetail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean(name = &quot;trigger&quot;)</span><br><span class=\"line\">    public CronTriggerFactoryBean  simpleJobTrigger1()&#123;</span><br><span class=\"line\">        CronTriggerFactoryBean trigger = new CronTriggerFactoryBean();</span><br><span class=\"line\">        trigger.setJobDetail(jobDetail());</span><br><span class=\"line\">        // cron表达式，每天0点执行一次</span><br><span class=\"line\">        trigger.setCronExpression(&quot;0 0 0 * * ?&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return trigger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时运行项目就能够正常使用定时任务了，测试可以修改corn表达式的时间</p>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2>","categories":[{"name":"后端","path":"api/categories/后端.json"}],"tags":[{"name":"SpringBoot","path":"api/tags/SpringBoot.json"},{"name":"定时任务","path":"api/tags/定时任务.json"},{"name":"corn表达式","path":"api/tags/corn表达式.json"}]}