{"title":"linux部署及基础环境配置(三)","slug":"linux对redis的安装与使用","date":"2020-03-06T07:10:25.257Z","updated":"2020-05-02T13:26:48.193Z","comments":true,"path":"api/articles/linux对redis的安装与使用.json","excerpt":" [Figure] 本次记录是关于中控服务的问题记载","covers":["http://5b0988e595225.cdn.sohucs.com/images/20180327/34adc98d775145f0b23c5fa67217af1d.png"],"content":"<p><img src=\"http://5b0988e595225.cdn.sohucs.com/images/20180327/34adc98d775145f0b23c5fa67217af1d.png\" alt><br>本次记录是关于中控服务的问题记载<a id=\"more\"></a>，场景是获取微信accessToken留存使用 其有效时长为两小时</p>\n<h2 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h2><ol>\n<li>先确保我们拥有gcc 因为redis是c编写的<blockquote>\n<p>yum install gcc-c++</p>\n</blockquote>\n</li>\n<li>下载redis安装包<blockquote>\n<p>wget <a href=\"http://download.redis.io/releases/redis-5.0.4.tar.gz\" target=\"_blank\" rel=\"noopener\">http://download.redis.io/releases/redis-5.0.4.tar.gz</a></p>\n</blockquote>\n</li>\n<li>解压安装包<blockquote>\n<p>tar -zxf redis-5.0.4.tar.gz</p>\n</blockquote>\n</li>\n<li>编译<blockquote>\n<p>cd redis-5.0.4<br>make</p>\n</blockquote>\n</li>\n<li>安装<blockquote>\n<p>make PREFIX=/usr/local/redis install</p>\n</blockquote>\n</li>\n<li>copy redis.conf到安装目录<blockquote>\n<p>cp redis.conf /usr/local/redis</p>\n</blockquote>\n</li>\n<li>进入安装目录<blockquote>\n<p>cd /usr/local/redis/</p>\n</blockquote>\n</li>\n<li><p>修改conf文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">1.后台启动，daemonize yes</span><br><span class=\"line\">2.绑定端口，port 6379 默认是6379 需要安全组开放端口</span><br><span class=\"line\">3.指定数据存放路径，dir /usr/local/redis/log rdb存放的路径</span><br><span class=\"line\">4.指定持久化方式，appendonly yes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动redis</p>\n<blockquote>\n<p> ./bin/redis-server ./redis.conf</p>\n</blockquote>\n</li>\n<li>查看进程<blockquote>\n<p>ps aux | grep redis</p>\n</blockquote>\n</li>\n<li>进入客户端<blockquote>\n<p>./bin/redis-cli –raw 处理中文乱码问题</p>\n</blockquote>\n</li>\n<li>get/set 测试是否能够正常使用</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 新增pom文件</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.application</span><br><span class=\"line\">## Redis 配置</span><br><span class=\"line\">## Redis数据库索引（默认为0）</span><br><span class=\"line\">spring.redis.database=0</span><br><span class=\"line\">## Redis服务器地址</span><br><span class=\"line\">spring.redis.host=127.0.0.1</span><br><span class=\"line\">## Redis服务器连接端口</span><br><span class=\"line\">spring.redis.port=6379</span><br><span class=\"line\">## Redis服务器连接密码（默认为空）</span><br><span class=\"line\">spring.redis.password=</span><br><span class=\"line\">## 连接池最大连接数（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.jedis.pool.max-active=8</span><br><span class=\"line\">## 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.jedis.pool.max-wait=-1</span><br><span class=\"line\">## 连接池中的最大空闲连接</span><br><span class=\"line\">spring.redis.jedis.pool.max-idle=8</span><br><span class=\"line\">## 连接池中的最小空闲连接</span><br><span class=\"line\">spring.redis.jedis.pool.min-idle=0</span><br><span class=\"line\">## 连接超时时间（毫秒）</span><br><span class=\"line\">spring.redis.jedis.timeout=1200</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">controller</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t···</span><br><span class=\"line\">\tif (stringRedisTemplate.opsForValue().get(&quot;accessToken&quot;) == null)&#123;</span><br><span class=\"line\">        String accessToken = xx.accessToken();\t\t//此处省略获取accessToken步骤</span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(&quot;accessToken&quot;,accessToken,7000, TimeUnit.SECONDS);</span><br><span class=\"line\">        return ResponseVO.success(accessToken);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        String accessToken = stringRedisTemplate.opsForValue().get(&quot;accessToken&quot;);</span><br><span class=\"line\">        return ResponseVO.success(accessToken);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t···</span><br></pre></td></tr></table></figure>\n<p>如此就能够实现中控服务的功能了。这里只是简单的用到了RedisTemplate的参数 下面记录一些常用参数</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令名称</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">set(K key, V value)</td>\n<td style=\"text-align:center\">新增一个字符串类型的值,key是键，value是值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(Object key)</td>\n<td style=\"text-align:center\">获取key键对应的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">append(K key, String value)</td>\n<td style=\"text-align:center\">在原有的值基础上新增字符串到末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(K key, long start, long end)</td>\n<td style=\"text-align:center\">截取key键对应值得字符串，从开始下标位置开始到结束下标的位置(包含结束下标)的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getAndSet(K key, V value)</td>\n<td style=\"text-align:center\">获取原来key键对应的值并重新赋新值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setBit(K key, long offset, boolean value)</td>\n<td style=\"text-align:center\">key键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getBit(K key, long offset)</td>\n<td style=\"text-align:center\">判断指定的位置ASCII码的bit位是否为1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size(K key)</td>\n<td style=\"text-align:center\">获取指定字符串的长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">increment(K key, double delta)</td>\n<td style=\"text-align:center\">以增量的方式将double值存储在变量中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setIfAbsent(K key, V value)</td>\n<td style=\"text-align:center\">如果键不存在则新增,存在则不改变已经有的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set(K key, V value, long timeout, TimeUnit unit)</td>\n<td style=\"text-align:center\">设置变量值的过期时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set(K key, V value, long offset)</td>\n<td style=\"text-align:center\">覆盖从指定位置开始的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiSet(Map&lt;? extends K,? extends V&gt; map)</td>\n<td style=\"text-align:center\">设置map集合到redis</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiGet(Collection<k> keys)</k></td>\n<td style=\"text-align:center\">根据集合取出对应的value值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiSetIfAbsent(Map&lt;? extends K,? extends V&gt; map)</td>\n<td style=\"text-align:center\">如果对应的map集合名称不存在，则添加，如果存在则不做修改</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2>","more":"，场景是获取微信accessToken留存使用 其有效时长为两小时</p>\n<h2 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h2><ol>\n<li>先确保我们拥有gcc 因为redis是c编写的<blockquote>\n<p>yum install gcc-c++</p>\n</blockquote>\n</li>\n<li>下载redis安装包<blockquote>\n<p>wget <a href=\"http://download.redis.io/releases/redis-5.0.4.tar.gz\" target=\"_blank\" rel=\"noopener\">http://download.redis.io/releases/redis-5.0.4.tar.gz</a></p>\n</blockquote>\n</li>\n<li>解压安装包<blockquote>\n<p>tar -zxf redis-5.0.4.tar.gz</p>\n</blockquote>\n</li>\n<li>编译<blockquote>\n<p>cd redis-5.0.4<br>make</p>\n</blockquote>\n</li>\n<li>安装<blockquote>\n<p>make PREFIX=/usr/local/redis install</p>\n</blockquote>\n</li>\n<li>copy redis.conf到安装目录<blockquote>\n<p>cp redis.conf /usr/local/redis</p>\n</blockquote>\n</li>\n<li>进入安装目录<blockquote>\n<p>cd /usr/local/redis/</p>\n</blockquote>\n</li>\n<li><p>修改conf文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">1.后台启动，daemonize yes</span><br><span class=\"line\">2.绑定端口，port 6379 默认是6379 需要安全组开放端口</span><br><span class=\"line\">3.指定数据存放路径，dir /usr/local/redis/log rdb存放的路径</span><br><span class=\"line\">4.指定持久化方式，appendonly yes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动redis</p>\n<blockquote>\n<p> ./bin/redis-server ./redis.conf</p>\n</blockquote>\n</li>\n<li>查看进程<blockquote>\n<p>ps aux | grep redis</p>\n</blockquote>\n</li>\n<li>进入客户端<blockquote>\n<p>./bin/redis-cli –raw 处理中文乱码问题</p>\n</blockquote>\n</li>\n<li>get/set 测试是否能够正常使用</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 新增pom文件</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.application</span><br><span class=\"line\">## Redis 配置</span><br><span class=\"line\">## Redis数据库索引（默认为0）</span><br><span class=\"line\">spring.redis.database=0</span><br><span class=\"line\">## Redis服务器地址</span><br><span class=\"line\">spring.redis.host=127.0.0.1</span><br><span class=\"line\">## Redis服务器连接端口</span><br><span class=\"line\">spring.redis.port=6379</span><br><span class=\"line\">## Redis服务器连接密码（默认为空）</span><br><span class=\"line\">spring.redis.password=</span><br><span class=\"line\">## 连接池最大连接数（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.jedis.pool.max-active=8</span><br><span class=\"line\">## 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.jedis.pool.max-wait=-1</span><br><span class=\"line\">## 连接池中的最大空闲连接</span><br><span class=\"line\">spring.redis.jedis.pool.max-idle=8</span><br><span class=\"line\">## 连接池中的最小空闲连接</span><br><span class=\"line\">spring.redis.jedis.pool.min-idle=0</span><br><span class=\"line\">## 连接超时时间（毫秒）</span><br><span class=\"line\">spring.redis.jedis.timeout=1200</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">controller</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t···</span><br><span class=\"line\">\tif (stringRedisTemplate.opsForValue().get(&quot;accessToken&quot;) == null)&#123;</span><br><span class=\"line\">        String accessToken = xx.accessToken();\t\t//此处省略获取accessToken步骤</span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(&quot;accessToken&quot;,accessToken,7000, TimeUnit.SECONDS);</span><br><span class=\"line\">        return ResponseVO.success(accessToken);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        String accessToken = stringRedisTemplate.opsForValue().get(&quot;accessToken&quot;);</span><br><span class=\"line\">        return ResponseVO.success(accessToken);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t···</span><br></pre></td></tr></table></figure>\n<p>如此就能够实现中控服务的功能了。这里只是简单的用到了RedisTemplate的参数 下面记录一些常用参数</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令名称</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">set(K key, V value)</td>\n<td style=\"text-align:center\">新增一个字符串类型的值,key是键，value是值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(Object key)</td>\n<td style=\"text-align:center\">获取key键对应的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">append(K key, String value)</td>\n<td style=\"text-align:center\">在原有的值基础上新增字符串到末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(K key, long start, long end)</td>\n<td style=\"text-align:center\">截取key键对应值得字符串，从开始下标位置开始到结束下标的位置(包含结束下标)的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getAndSet(K key, V value)</td>\n<td style=\"text-align:center\">获取原来key键对应的值并重新赋新值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setBit(K key, long offset, boolean value)</td>\n<td style=\"text-align:center\">key键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getBit(K key, long offset)</td>\n<td style=\"text-align:center\">判断指定的位置ASCII码的bit位是否为1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size(K key)</td>\n<td style=\"text-align:center\">获取指定字符串的长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">increment(K key, double delta)</td>\n<td style=\"text-align:center\">以增量的方式将double值存储在变量中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setIfAbsent(K key, V value)</td>\n<td style=\"text-align:center\">如果键不存在则新增,存在则不改变已经有的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set(K key, V value, long timeout, TimeUnit unit)</td>\n<td style=\"text-align:center\">设置变量值的过期时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set(K key, V value, long offset)</td>\n<td style=\"text-align:center\">覆盖从指定位置开始的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiSet(Map&lt;? extends K,? extends V&gt; map)</td>\n<td style=\"text-align:center\">设置map集合到redis</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiGet(Collection<k> keys)</k></td>\n<td style=\"text-align:center\">根据集合取出对应的value值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiSetIfAbsent(Map&lt;? extends K,? extends V&gt; map)</td>\n<td style=\"text-align:center\">如果对应的map集合名称不存在，则添加，如果存在则不做修改</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2>","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"环境部署","path":"api/tags/环境部署.json"},{"name":"redis","path":"api/tags/redis.json"}]}