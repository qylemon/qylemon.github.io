{"title":"Dubbo入门体验","slug":"Dubbo入门","date":"2019-04-01T14:11:33.913Z","updated":"2019-04-02T06:07:26.097Z","comments":true,"path":"api/articles/Dubbo入门.json","excerpt":" [Figure] ","covers":["https://img1.mukewang.com/5b8757e2000197b605000389.jpg"],"content":"<p><img src=\"https://img1.mukewang.com/5b8757e2000197b605000389.jpg\" alt></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Dubbo 是阿里巴巴开源项目的一个分布式服务框架。其致力于提供高性能和透明化的 RPC 远程调用方案，以及 SOA 服务治理方案。<br><a id=\"more\"></a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>由图可见dubbo主要由服务提供者、注册中心、服务消费者、监控中心和容器组成</p>\n<table>\n<thead>\n<tr>\n<th>节点</th>\n<th>角色说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Container</td>\n<td>服务运行容器</td>\n</tr>\n<tr>\n<td>Provider</td>\n<td>暴露服务的服务提供者</td>\n</tr>\n<tr>\n<td>Consumer</td>\n<td>调用远程服务的服务消费者</td>\n</tr>\n<tr>\n<td>Registry</td>\n<td>服务注册与发现的注册中心</td>\n</tr>\n<tr>\n<td>Monitor</td>\n<td>统计服务的调用此处和调用时间的监控中心</td>\n</tr>\n</tbody>\n</table>\n<p>过程如上图所示<br></p>\n<ol>\n<li>服务运行容器启动、加载运行服务提供者<br></li>\n<li>服务提供者启动时将服务提供给注册中心<br></li>\n<li>服务消费者启动时向注册中心订阅需要的服务<br></li>\n<li>注册中心返回服务提供者信息列表给消费者<br></li>\n<li>服务消费者从列表中,基于软负载均衡选一台服务提供者进行调用，如果调用失败再选另一台<br></li>\n<li>服务消费者和服务提供者在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2>在网上找了很久demo多数写的不够全面,找了很久才找到了一个较为详细的,项目是maven聚合项目,通过api、服务提供者、服务消费者三个model构成,注册中心使用zookeeper<a href=\"https://blog.csdn.net/qq_30764991/article/details/80188652#commentBox\" target=\"_blank\" rel=\"noopener\">单体zookeeper-Windows安装教程</a>,demo具体实现→<a href=\"https://github.com/qylemon/Dubbo/tree/master/dubbo-demo-xml\" target=\"_blank\" rel=\"noopener\">dubbo-demo</a><h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2>在dubbo官网上还有服务、集群、负载均衡等知识供学习<a href=\"http://dubbo.apache.org/zh-cn/docs/user/preface/background.html\" target=\"_blank\" rel=\"noopener\">Dubbo官网</a>,这些可以在dubbo-admin中控制<a href=\"https://github.com/qylemon/Dubbo/tree/master/dubbo-admin\" target=\"_blank\" rel=\"noopener\">dubbo-admin</a></li>\n</ol>\n","more":"</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>由图可见dubbo主要由服务提供者、注册中心、服务消费者、监控中心和容器组成</p>\n<table>\n<thead>\n<tr>\n<th>节点</th>\n<th>角色说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Container</td>\n<td>服务运行容器</td>\n</tr>\n<tr>\n<td>Provider</td>\n<td>暴露服务的服务提供者</td>\n</tr>\n<tr>\n<td>Consumer</td>\n<td>调用远程服务的服务消费者</td>\n</tr>\n<tr>\n<td>Registry</td>\n<td>服务注册与发现的注册中心</td>\n</tr>\n<tr>\n<td>Monitor</td>\n<td>统计服务的调用此处和调用时间的监控中心</td>\n</tr>\n</tbody>\n</table>\n<p>过程如上图所示<br></p>\n<ol>\n<li>服务运行容器启动、加载运行服务提供者<br></li>\n<li>服务提供者启动时将服务提供给注册中心<br></li>\n<li>服务消费者启动时向注册中心订阅需要的服务<br></li>\n<li>注册中心返回服务提供者信息列表给消费者<br></li>\n<li>服务消费者从列表中,基于软负载均衡选一台服务提供者进行调用，如果调用失败再选另一台<br></li>\n<li>服务消费者和服务提供者在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2>在网上找了很久demo多数写的不够全面,找了很久才找到了一个较为详细的,项目是maven聚合项目,通过api、服务提供者、服务消费者三个model构成,注册中心使用zookeeper<a href=\"https://blog.csdn.net/qq_30764991/article/details/80188652#commentBox\" target=\"_blank\" rel=\"noopener\">单体zookeeper-Windows安装教程</a>,demo具体实现→<a href=\"https://github.com/qylemon/Dubbo/tree/master/dubbo-demo-xml\" target=\"_blank\" rel=\"noopener\">dubbo-demo</a><h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2>在dubbo官网上还有服务、集群、负载均衡等知识供学习<a href=\"http://dubbo.apache.org/zh-cn/docs/user/preface/background.html\" target=\"_blank\" rel=\"noopener\">Dubbo官网</a>,这些可以在dubbo-admin中控制<a href=\"https://github.com/qylemon/Dubbo/tree/master/dubbo-admin\" target=\"_blank\" rel=\"noopener\">dubbo-admin</a></li>\n</ol>","categories":[],"tags":[]}