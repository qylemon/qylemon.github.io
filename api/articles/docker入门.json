{"title":"docker入门","slug":"docker入门","date":"2019-03-28T06:49:03.609Z","updated":"2019-06-29T09:35:25.258Z","comments":true,"path":"api/articles/docker入门.json","excerpt":" [Figure] ","covers":["https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/439845acfee8867089ee2fa9d41e4c3a16cdc082cea4fed7a952501b057cc690306ec07d36b80d546861286e40ef58a9?pictype=scale&amp;from=30113&amp;version=3.3.3.3&amp;uin=1643994375&amp;fname=16178336d76fb404.png&amp;size=750"],"content":"<p><img src=\"https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/439845acfee8867089ee2fa9d41e4c3a16cdc082cea4fed7a952501b057cc690306ec07d36b80d546861286e40ef58a9?pictype=scale&amp;from=30113&amp;version=3.3.3.3&amp;uin=1643994375&amp;fname=16178336d76fb404.png&amp;size=750\" alt></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>docker容器采用c/s架构,使用镜像来创建容器,使用远程api来管理容器<br>&gt;&gt;&gt;<a href=\"https://baike.baidu.com/item/Docker/13344470?fr=aladdin#1\" target=\"_blank\" rel=\"noopener\">docker简介</a><br><a id=\"more\"></a></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>某个系统的技术栈非常广就会需要依赖于各种开源库和中间件,如果需要多次部署,那么版本控制、依赖管理就会相对复杂,docker只需要根据应用程序的部署步骤编写一份Dockerfile文件(将安装、配置等操作交由Docker自动化处理),然后构建并发布他的镜像,这样,不管在什么机器上都只需要拉取需要的镜像,然后就可以直接部署运行</p>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>docker分为三部分,理解其作用也就了解了生命周期,docker分为镜像、容器、仓库</p>\n<blockquote>\n<p>镜像是Docker生命周期中的构建或打包阶段，容器则是启动或执行阶段</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>mac和Linux可以流畅安装,windows需要看版本,专业版流畅,家庭版需要执行命令开启Hyper-V和修改注册表,参考→<a href=\"https://www.jianshu.com/p/1329954aa329/\" target=\"_blank\" rel=\"noopener\">windows家庭版安装docker</a></p>\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><pre><code>docker 查看所有命令\ndocker images 列出本地镜像\ndocker pull 从镜像仓库中拉取或者更新指定镜像\ndocker ps 列出正在运行的容器...\n</code></pre><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><pre><code>docker run hello-world \n</code></pre><p>能够看到控制台打印hello world就成功了</p>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2><ul>\n<li><p>docker在后期使用过程中拉去镜像极慢,可以在docker-&gt;setting中采用国内镜像加速</p>\n<blockquote>\n<p><a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a> 中文镜像加速网址</p>\n</blockquote>\n</li>\n<li><p>dockerfile适合安装多个镜像自动化时使用,单个推荐直接安装</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"dockerfile\"><a href=\"#dockerfile\" class=\"headerlink\" title=\"dockerfile\"></a>dockerfile</h3><p>创建dockerfil文件</p>\n<blockquote>\n<p>type nul&gt;DockerfileName</p>\n</blockquote>\n</li>\n</ul>\n<p>dockerfile内容如下</p>\n<pre><code>#基于 node 镜像\nFROM node\n#指定维护者信息\nMAINTAINER xx xxx@xx.com\n#指定下一条命令的运行目录\nWORKDIR /usr/local\n#新建路径\nRUN mkdir work\n#在 /usr/local 的基础上指定运行目录，所以当前目录为：/usr/local/work\nWORKDIR work\n#安装必要的组件\nRUN npm install express\nRUN npm install express-generator -g\nRUN npm install supervisor -g\nRUN express myapp -e\n#将当前目录下的文件，复制到 /usr/local/work/ 下\n#COPY . /usr/local/work/\nWORKDIR /usr/local/work/myapp\nRUN npm install\nWORKDIR /usr/local/work/myapp\n#启动 express 应用\nCMD supervisor ./bin/www\n#暴露容器 3000 端口\nEXPOSE 3000\n</code></pre><blockquote>\n<p>docker build -t imagename . （在dockerfile所在目录运行创建镜像 .号是指定 dockerfile 在当前目录中）<br><br>docker run -p 4000:3000 imagename (映射到宿主机)</p>\n</blockquote>\n<p>*dockerfile取于<a href=\"https://www.jianshu.com/p/0bbbd5c7d020\" target=\"_blank\" rel=\"noopener\">使用 Dockerfile 自定义 Docker 镜像</a></p>\n","more":"</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>某个系统的技术栈非常广就会需要依赖于各种开源库和中间件,如果需要多次部署,那么版本控制、依赖管理就会相对复杂,docker只需要根据应用程序的部署步骤编写一份Dockerfile文件(将安装、配置等操作交由Docker自动化处理),然后构建并发布他的镜像,这样,不管在什么机器上都只需要拉取需要的镜像,然后就可以直接部署运行</p>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>docker分为三部分,理解其作用也就了解了生命周期,docker分为镜像、容器、仓库</p>\n<blockquote>\n<p>镜像是Docker生命周期中的构建或打包阶段，容器则是启动或执行阶段</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>mac和Linux可以流畅安装,windows需要看版本,专业版流畅,家庭版需要执行命令开启Hyper-V和修改注册表,参考→<a href=\"https://www.jianshu.com/p/1329954aa329/\" target=\"_blank\" rel=\"noopener\">windows家庭版安装docker</a></p>\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><pre><code>docker 查看所有命令\ndocker images 列出本地镜像\ndocker pull 从镜像仓库中拉取或者更新指定镜像\ndocker ps 列出正在运行的容器...\n</code></pre><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><pre><code>docker run hello-world \n</code></pre><p>能够看到控制台打印hello world就成功了</p>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2><ul>\n<li><p>docker在后期使用过程中拉去镜像极慢,可以在docker-&gt;setting中采用国内镜像加速</p>\n<blockquote>\n<p><a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a> 中文镜像加速网址</p>\n</blockquote>\n</li>\n<li><p>dockerfile适合安装多个镜像自动化时使用,单个推荐直接安装</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"dockerfile\"><a href=\"#dockerfile\" class=\"headerlink\" title=\"dockerfile\"></a>dockerfile</h3><p>创建dockerfil文件</p>\n<blockquote>\n<p>type nul&gt;DockerfileName</p>\n</blockquote>\n</li>\n</ul>\n<p>dockerfile内容如下</p>\n<pre><code>#基于 node 镜像\nFROM node\n#指定维护者信息\nMAINTAINER xx xxx@xx.com\n#指定下一条命令的运行目录\nWORKDIR /usr/local\n#新建路径\nRUN mkdir work\n#在 /usr/local 的基础上指定运行目录，所以当前目录为：/usr/local/work\nWORKDIR work\n#安装必要的组件\nRUN npm install express\nRUN npm install express-generator -g\nRUN npm install supervisor -g\nRUN express myapp -e\n#将当前目录下的文件，复制到 /usr/local/work/ 下\n#COPY . /usr/local/work/\nWORKDIR /usr/local/work/myapp\nRUN npm install\nWORKDIR /usr/local/work/myapp\n#启动 express 应用\nCMD supervisor ./bin/www\n#暴露容器 3000 端口\nEXPOSE 3000\n</code></pre><blockquote>\n<p>docker build -t imagename . （在dockerfile所在目录运行创建镜像 .号是指定 dockerfile 在当前目录中）<br><br>docker run -p 4000:3000 imagename (映射到宿主机)</p>\n</blockquote>\n<p>*dockerfile取于<a href=\"https://www.jianshu.com/p/0bbbd5c7d020\" target=\"_blank\" rel=\"noopener\">使用 Dockerfile 自定义 Docker 镜像</a></p>","categories":[],"tags":[]}